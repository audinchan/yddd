<?xml version="1.0" encoding="UTF-8"?>

<project default="help" name="rent" basedir=".">

	<!-- build config -->
	<property file="build.properties" />
	
	<!-- java source directory -->
	<mkdir dir="${export_dir}/${src.dir}"/>

	<!-- tool's classpath -->
	<path id="classpath">
		<dirset dir="${conf.dir}">
			<include name="**"/>
		</dirset>
		<dirset dir="${export_dir}/${src.dir}">
			<include name="**" />
		</dirset>
		<fileset dir="lib/">
			<include name="**/*.jar" />
		</fileset>
		<!-- for hibernate annotation, currently use Eclipse to compile Pojo files. -->
		<dirset dir="build">
			<include name="**" />
		</dirset>
		<fileset dir="${web.dir}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- hibernate tool -->
	<taskdef name="htool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="classpath" />

	<!-- db tool -->
	<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="classpath"/>

	<!-- =================================
          target: help
         ================================= -->
	<target name="help" description="--> print help">
		<echo>Build Help.</echo>
		<echo></echo>
		<echo>ant help: display help information.</echo>
		<echo>Code Generation</echo>
		<echo>-----------------</echo>
		<echo>ant genall: generate Full-Stack base(orm,dao,service,spring config,hibernate config, etc.).</echo>
		<echo>ant genconf: generate hibernate config file.</echo>
		<echo>ant genmapping: generate hibernate mapping files.</echo>
		<echo>ant genpojo: generate POJO.</echo>
		<echo>ant gencode: generate dao,service,spring config.</echo>
		<echo></echo>
		<echo>Build</echo>
		<echo>-----------------</echo>
		<echo>ant war: create war file.</echo>
		<echo>ant test: run junit test.</echo>
		<echo>ant test-report: create test report.</echo>
		<echo>ant clean: clean build files.</echo>
		<echo>ant build: compile java classes.</echo>
		<echo>ant copy-resource: copy resource files.</echo>
		<echo>ant load-testdata: load test data to database.</echo>
		<echo>ant remove-testdata: remove test data from database.</echo>
		<echo></echo>
	</target>

	<!-- Code Generation -->


	<!-- 如果在参数中指定para为true，则使用filterpara，否则使用filternormal过滤hibernate配置文件的生-->
	<filterset id="filterpara">
		<filter token="db.driver" value="${db.driver}"/>
		<filter token="db.url" value="${db.url}"/>
		<filter token="db.username" value="${db.username}"/>
		<filter token="db.password" value="${db.password}"/>
		<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
	</filterset>
	<filterset id="filternormal">
		<filtersfile file="build.properties"/>
	</filterset>
	<condition property="runfilter" value="filterpara">
		<istrue value="${para}"/>
	</condition>
	<condition property="runfilter" value="filternormal">
		<not><istrue value="${para}"/></not>
	</condition>

	<!-- =================================
	          	target: genconf
	           	生成项目配置文件框架（不包含映射文件的配置）
	           	hibernate.cfg.xml
	         ================================= -->
	<target name="genconf" depends="gendbconf" description="--> create hibernate config">
		<copy  overwrite="${override_conf}" file="${conf.dir}/hibernate.cfg.xml" todir="${export_dir}/${src.dir}">
			<filterset refid="${runfilter}"/>
		</copy>
	</target>
	
	<target name="gendbconf" description="--> create hibernate config">
		<copy  overwrite="${override_conf}" file="${conf.dir}/db-conf.properties" todir="${export_dir}/${src.dir}">
			<filterset refid="${runfilter}"/>
		</copy>
	</target>

	<!-- =================================
			target: gencode
			生成项目基础文件
			dao，service，spring配置文件
	     ================================= -->
	<target name="gencode" description="--> generate daos, services and configurations">
		<htool destdir="${export_dir}">
			<configuration configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml" />
			<property key="hibernatetool.hssutil.toolclass" value="org.mintgen.tools.Util" />
			<property key="hss_src_dir" value="${src.dir}" />
			<property key="hss_test_dir" value="${test.dir}" />
			<property key="hss_web_dir" value="${web.dir}" />
			<property key="hss_appname" value="${app.name}" />
			<property key="hss_dao_package" value="${package.dao}" />
			<property key="hss_service_package" value="${package.service}" />
			<property key="hss_base_package" value="${package.base}" />
			<property key="hss_conf_transactionManager" value="${spring.transactionManager}"/>

			<!-- 导出项设 -->
			<property key="include_models" value="${include_models}" />
			<property key="exclude_models" value="${exclude_models}" />
			<property key="hss_jdk5" value="${hss_jdk5}" />
			<property key="hss_ejb3" value="${hss_ejb3}" />
			<property key="merge_dao" value="${merge_dao}" />
			<property key="hss_overwrite_exists" value="${hss_overwrite_exists}" />
			<property key="hss_create_another_file" value="${hss_create_another_file}" />
			<property key="hss_another_fileext" value="${hss_another_fileext}" />
			<property key="hss_export_rootdao_interface" value="${hss_export_rootdao_interface}" />
			<property key="hss_export_basedao_interface" value="${hss_export_basedao_interface}" />
			<property key="hss_export_dao_interface" value="${hss_export_dao_interface}" />
			<property key="hss_export_rootdao" value="${hss_export_rootdao}" />
			<property key="hss_export_basedao" value="${hss_export_basedao}" />
			<property key="hss_export_dao" value="${hss_export_dao}" />
			<property key="hss_export_rootservice_interface" value="${hss_export_rootservice_interface}" />
			<property key="hss_export_baseservice_interface" value="${hss_export_baseservice_interface}" />
			<property key="hss_export_service_interface" value="${hss_export_service_interface}" />
			<property key="hss_export_rootservice" value="${hss_export_rootservice}" />
			<property key="hss_export_baseservice" value="${hss_export_baseservice}" />
			<property key="hss_export_service" value="${hss_export_service}" />
			<property key="hss_export_dao_context" value="${hss_export_dao_context}" />
			<property key="hss_export_service_context" value="${hss_export_service_context}" />
			<property key="hss_export_action_context" value="${hss_export_action_context}" />
			<property key="hss_export_demo" value="${hss_export_demo}" />
			<property key="hss_export_base_testcase" value="${hss_export_base_testcase}" />
			<property key="hss_extra_template" value="${hss_extra_template}" />

			<!-- 扩展的导出工 -->
			<hbmtemplate exporterclass="org.mintgen.tools.Exporter" templatepath="." />
		</htool>

	</target>

	<!-- =================================
			target: gencode for annotation version(ejb3 style)
			生成项目基础文件
			dao，service，spring配置文件
	     ================================= -->
	<target name="gencode2" depends="build" description="--> generate daos, services and configurations (with annotation support)">
		<htool destdir="${export_dir}">
			<annotationconfiguration configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml" />
			<property key="hibernatetool.hssutil.toolclass" value="org.mintgen.tools.Util" />
			<property key="hss_src_dir" value="${src.dir}" />
			<property key="hss_test_dir" value="${test.dir}" />
			<property key="hss_web_dir" value="${web.dir}" />
			<property key="hss_appname" value="${app.name}" />
			<property key="hss_dao_package" value="${package.dao}" />
			<property key="hss_service_package" value="${package.service}" />
			<property key="hss_base_package" value="${package.base}" />
			<property key="hss_conf_transactionManager" value="${spring.transactionManager}"/>

			<!-- 导出项设 -->
			<property key="include_models" value="${include_models}" />
			<property key="exclude_models" value="${exclude_models}" />
			<property key="hss_jdk5" value="${hss_jdk5}" />
			<property key="hss_ejb3" value="${hss_ejb3}" />
			<property key="merge_dao" value="${merge_dao}" />
			<property key="hss_overwrite_exists" value="${hss_overwrite_exists}" />
			<property key="hss_create_another_file" value="${hss_create_another_file}" />
			<property key="hss_another_fileext" value="${hss_another_fileext}" />
			<property key="hss_export_rootdao_interface" value="${hss_export_rootdao_interface}" />
			<property key="hss_export_basedao_interface" value="${hss_export_basedao_interface}" />
			<property key="hss_export_dao_interface" value="${hss_export_dao_interface}" />
			<property key="hss_export_rootdao" value="${hss_export_rootdao}" />
			<property key="hss_export_basedao" value="${hss_export_basedao}" />
			<property key="hss_export_dao" value="${hss_export_dao}" />
			<property key="hss_export_rootservice_interface" value="${hss_export_rootservice_interface}" />
			<property key="hss_export_baseservice_interface" value="${hss_export_baseservice_interface}" />
			<property key="hss_export_service_interface" value="${hss_export_service_interface}" />
			<property key="hss_export_rootservice" value="${hss_export_rootservice}" />
			<property key="hss_export_baseservice" value="${hss_export_baseservice}" />
			<property key="hss_export_service" value="${hss_export_service}" />
			<property key="hss_export_dao_context" value="${hss_export_dao_context}" />
			<property key="hss_export_service_context" value="${hss_export_service_context}" />
			<property key="hss_export_action_context" value="${hss_export_action_context}" />
			<property key="hss_export_demo" value="${hss_export_demo}" />
			<property key="hss_export_base_testcase" value="${hss_export_base_testcase}" />
			<property key="hss_extra_template" value="${hss_extra_template}" />

			<!-- 扩展的导出工 -->
			<hbmtemplate exporterclass="org.mintgen.tools.Exporter" templatepath="." />
		</htool>

	</target>

    <!-- =================================
          	target: genmapping
          	生成hibernate配置文件和映射文
         ================================= -->
    <target name="genmapping" description="--> description">
    	<htool destdir="${export_dir}/${src.dir}">
    		<jdbcconfiguration
    			configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml"
    			packagename="${package.model}"
    			revengfile="${conf.dir}/hibernate.reveng.xml"
    			detectManytoMany="true"
    			detectOptimisticLock="true"
    		/>
    		<hbm2hbmxml/>
    		<hbm2cfgxml/>
    	</htool>
    	<!--
    	<replace dir="${export_dir}/${src.dir}" token="assigned" value="native">
			<include name="**/*.hbm.xml"/>
    	</replace>
    	-->
    </target>

    <target name="genddl" description="--> generate ddl">
    	<htool destdir="${export_dir}/${src.dir}">
    		<annotationconfiguration configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml" />
    		<hbm2ddl destdir="." drop="true"/>
    	</htool>
    </target>

    <!-- =================================
          	target: genpojo
          	生成POJO文件（可以在这里定制更复杂的源文件生成方式）
         ================================= -->
    <target name="genpojo" description="--> generate pojo files">
    	<htool destdir="${export_dir}/${src.dir}">
    		<!-- <configuration configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml" /> -->
    		<configuration>
    			<fileset dir="${src.dir}">
				    <include name="**/*.hbm.xml"/>
    				<exclude name="**/Copy*.hbm.xml"/>
				</fileset>
    		</configuration>
    		<hbm2java jdk5="${hss_jdk5}" ejb3="false"/>
    	</htool>
    </target>

	<!-- generate annotation version pojos, current is in test stage. -->
	<target name="genpojo2" description="--> generate pojo(annotation driven) files">
	    	<htool destdir="${export_dir}/${src.dir}">
	    		<jdbcconfiguration
	    			configurationfile="${export_dir}/${src.dir}/hibernate.cfg.xml"
	    			packagename="${package.model}2"
	    			revengfile="${conf.dir}/hibernate.reveng.xml"
	    			detectManytoMany="true"
	    			detectOptimisticLock="true"
	    		/>
	    		<hbm2java jdk5="${hss_jdk5}" ejb3="true"/>
	    	</htool>
	    </target>

    <!-- =================================
          	target: genall
          	生成项目全部基础文件
         ================================= -->
    <target name="genall" depends="genconf,genmapping,genpojo,gencode" description="--> generate all files">

    </target>


	<!-- 项目构建部分 -->

    <!-- - - - - - - - - - - - - - - - - -
          target: build_prepare
         - - - - - - - - - - - - - - - - - -->
    <target name="build_prepare">
    	<mkdir dir="${build.dir}/classes"/>
   		<mkdir dir="${build.dir}/${app.name}/WEB-INF/classes"/>
    </target>


    <!-- =================================
          target: build
         ================================= -->
    <target name="build" depends="build_prepare" description="--> build">
        <javac encoding="UTF-8" classpathref="classpath" srcdir="${src.dir}" destdir="${build.dir}/classes"></javac>
    	<copy todir="${build.dir}/classes">
    		<fileset dir="${src.dir}">
    			<exclude name="**/*.java"/>
    			<exclude name="**/harvest.sig"/>
    		</fileset>
    	</copy>
    	<javac encoding="UTF-8" classpathref="classpath" srcdir="${test.src.dir}" destdir="${build.dir}/classes"></javac>
    </target>

	<!-- =================================
          target:  encoding
         ================================= -->
    <target name="encoding" description="--> encoding native resource file">
        <native2ascii encoding="${i18n.src.encoding}" src="${i18n.src.dir}" dest="${i18n.dst.dir}">
        	<include name="**/*.properties"/>
        </native2ascii>
    </target>



    <!-- =================================
          target: copy-resource
         ================================= -->
    <target name="copy-resource" depends="build_prepare">
        <copy todir="${build.dir}/${app.name}/WEB-INF/classes">
        	<fileset dir="${build.dir}/classes">
        		<exclude name="**/*Test.class"/>
        		<exclude name="**/*TestCase.class"/>
        	</fileset>
    	</copy>
    	<copy todir="${build.dir}/${app.name}">
    		<fileset dir="${web.dir}">
    			<exclude name="harvest.sig"/>
    		</fileset>
    	</copy>
    </target>


    <!-- =================================
          target: war
         ================================= -->
    <target name="war" depends="build,copy-resource" description="--> war project">
        <war destfile="${build.dir}/${app.name}.war" webxml="${build.dir}/${app.name}/WEB-INF/web.xml" compress="true">
        	<fileset dir="${build.dir}/${app.name}">
        	</fileset>
        </war>
    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: load-testdata
         - - - - - - - - - - - - - - - - - -->
    <target name="load-testdata" description="加载测试数据">
        <dbunit driver="${db.driver}"
            supportBatchStatement="true"
            url="${db.url}"
            userid="${db.username}"
            password="${db.password}">
            <operation type="INSERT" src="${test.data.file}" format="xml"/>
        </dbunit>
    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: remove-testdata
         - - - - - - - - - - - - - - - - - -->
    <target name="remove-testdata" description="删除测试数据">
        <dbunit driver="${db.driver}"
            supportBatchStatement="true"
            url="${db.url}"
            userid="${db.username}"
            password="${db.password}">
            <operation type="DELETE" src="${test.data.file}" format="xml"/>
        </dbunit>
    </target>

    <target name="dotest">
        <mkdir dir="${build.dir}/testdata"/>
    	<junit printsummary="yes">
    		<classpath>
    			<path refid="classpath"/>
    			<pathelement path="${build.dir}/classes"/>
    		</classpath>
    		<formatter type="xml"/>
    		<formatter type="brief" usefile="false"/>
    		<batchtest todir="${build.dir}/testdata">
    			<fileset dir="${build.dir}/classes">
					<include name="**/*Test.class"/>
    				<exclude name="**/BaseTestCase.class"/>
    			</fileset>
    		</batchtest>
    	</junit>
    </target>


    <!-- =================================
          target: test
          depends="build,load-testdata,dotest,remove-testdata"
         ================================= -->
    <target name="test" depends="build,dotest" description="--> unit test with data">
		<antcall target="test-report"></antcall>
    </target>


    <!-- =================================
          target: test-report
         ================================= -->
    <target name="test-report" description="--> generate test report">
        <mkdir dir="${build.dir}/testreports"/>
    	<junitreport todir="${build.dir}/testreports">
    		<fileset dir="${build.dir}/testdata">
    			<include name="TEST-*.xml"/>
    		</fileset>
    		<report format="frames" todir="${build.dir}/testreports"/>
		</junitreport>
    	<echo level="info">
    		测试报告保存在 ${build.dir}\testreports 目录
    	</echo>
    	<exec executable="cmd.exe">
    		<arg line="/C start ${build.dir}\testreports\index.html"/>
    	</exec>
    </target>



    <!-- =================================
          target: clean
         ================================= -->
    <target name="clean" description="--> clean">
        <delete dir="${build.dir}"></delete>
    </target>

</project>